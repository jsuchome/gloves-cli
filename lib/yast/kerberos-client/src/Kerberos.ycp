/**
 * File:	modules/Kerberos.ycp
 * Package:	Configuration of kerberos-client
 * Summary:	Data for configuration of kerberos-client, i/o functions.
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id: Kerberos.ycp 64832 2011-07-15 10:10:28Z jsuchome $
 *
 * Representation of the configuration of kerberos-client.
 * Input and output routines.
 */

{

module "Kerberos";

textdomain "kerberos";

import "FileUtils";
import "Hostname";
import "Label";
import "Mode";
import "Package";
import "Progress";
import "Report";
import "Service";
import "Stage";
import "Summary";

// ruby API
import "Glove::KerberosClient";

/**
 * Required packages for this module to operate
 */
global list<string> required_packages = ["pam_krb5", "krb5", "krb5-client"];

global boolean write_only = false;

// if pam_krb5 module is used for login
global boolean use_pam_krb = false;

// if pam_unix is in /etc/pam.d/login
boolean pam_unix_present = false;

// default realm and domain name
global string default_realm = "";
global string default_domain = "";

global string dns_default_realm = "";
global string dns_kdc		= "";

// adress of KDC (key distribution centre) server for default realm
global string kdc = "";
string admin_server = "";

// used for pkinit-nss (feature 302132)
global string trusted_servers	= "";

global string clockskew = "300";

global boolean pam_modified = false;
global boolean ssh_modified = false;
global boolean modified = false;

// advanced krb5.conf settings (pam section)
global string ticket_lifetime = "1d";
global string renew_lifetime = "1d";
global string forwardable = "true";
global string proxiable = "false";
// obsolete, do not use
global string retain_after_close = "false";
global boolean ssh_support = false;
global string minimum_uid = "1";

// deprecated at this scope: now present in ExpertSettings map
global string use_shmem	= "sshd";
global string mappings	= "";

// --krb5-ignore_unknown_principals for pam-config
global boolean ignore_unknown	= true;

// packages to install (openssh etc.)
global list<string> packages = [];

// if DNS can be used for retrieving configuration data
global boolean dns_available	= false;

// if DNS is used for retrieving configuration data
global boolean dns_used		= false;

// if sssd is configured, do not use pam_krb5
global boolean sssd		= false;

/**
  map with the settings configurable in the expert tabs
 */
global map<string,any> ExpertSettings	= $[];

/**
 * Data was modified?
 * @return true if modified
 */
global define boolean Modified() ``{
    y2debug("modified=%1",modified);
    return (modified || pam_modified || ssh_modified);
};


/**
 * Get all the Kerberos configuration from a map.
 * @param settings imported map
 * @return	success
 */
global define boolean Import (map settings) ``{
    use_pam_krb		= settings["pam_login", "use_kerberos"]:false;
    map client		= settings["kerberos_client"]:$[];

    default_domain	= client["default_domain"]:"";
    default_realm	= client["default_realm"]:"";
    kdc			= client["kdc_server"]:client["kdc"]:"";
    clockskew		= client["clockskew"]:clockskew;
    ssh_support		= client["ssh_support"]:false;
    ignore_unknown	= client["ignore_unknown"]:ignore_unknown;
    ticket_lifetime	= client["ticket_lifetime"]:"1d";
    renew_lifetime	= client["renew_lifetime"]:"1d";
    minimum_uid		= client["minimum_uid"]:minimum_uid;
    if (is (client["forwardable"]:nil, string))
    {
	forwardable	= client["forwardable"]:forwardable;
    }
    else
    {
	forwardable	= (client["forwardable"]:true) ? "true": "false";
    }
    if (is (client["proxiable"]:nil, string))
    {
	proxiable	= client["proxiable"]:proxiable;
    }
    else
    {
	proxiable	= (client["proxiable"]:false) ?   "true" :  "false";
    }
    use_shmem		= client["use_shmem"]:use_shmem;
    mappings		= client["mappings"]:"";
    trusted_servers	= client["trusted_servers"]:"";
    ExpertSettings	= client["ExpertSettings"]:$[];
    if (!haskey (ExpertSettings, "use_shmem") && haskey (client, "use_shmem"))
	ExpertSettings["use_shmem"]	= use_shmem;

    sssd		= settings["pam_login","sssd"]:sssd;
    pam_modified	= true;
    modified		= true;
    ssh_modified	= true;
    return true;
}


/**
 * Dump the Kerberos settings to a map, for autoinstallation use.
 * @return map with settings
 */
global define map Export () ``{

    map export_map	= $[
	"pam_login": $[
		"use_kerberos"		: use_pam_krb,
		"sssd"			: sssd,
	],
	"kerberos_client": $[
		"default_domain"	: default_domain,
		"default_realm"		: default_realm,
		"kdc_server"		: kdc, // for autoYaST backward compatibility
		"kdc"			: kdc,
		"clockskew"		: clockskew,
		"ssh_support"		: ssh_support,
		"ignore_unknown"	: ignore_unknown,
		"ticket_lifetime"	: ticket_lifetime,
                "renew_lifetime"	: renew_lifetime,
                "minimum_uid"		: minimum_uid,
		"forwardable"		: forwardable == "true",
                "proxiable"		: proxiable == "true",
		"ExpertSettings"	: ExpertSettings,
	]
    ];
    if (mappings != "")
	export_map["kerberos_client","mappings"]	= mappings;
    if (trusted_servers	!= "")
	export_map["kerberos_client","trusted_servers"]	= trusted_servers;
    return export_map;
}

/**
 * Reads Kerberos settings from the SCR
 * @return success
 */
global define boolean Read () ``{

    map read	= (map) Glove::KerberosClient::read ($[]);

    if (read == nil)
    {
	string message	= (string) Glove::KerberosClient::last_error ();
	if (message != nil && message != "")
	{
	    Report::Error (message);
	}
	return false;
    }

    Import (read);

    // Expert settings are directly in 'read' map

    foreach (string key, [ "keytab", "ccache_dir", "ccname_template",
	    "mappings", "existing_ticket", "external", "validate", "use_shmem",
	    "addressless", "debug", "debug_sensitive",
	    "initial_prompt", "subsequent_prompt", "banner"],
    {
	if (read[key]:nil != nil)
	    ExpertSettings[key]	= read[key]:nil;
    });
    if (!haskey (ExpertSettings, "use_shmem"))
	ExpertSettings["use_shmem"]	= "sshd";
    use_shmem	= ExpertSettings["use_shmem"]:"sshd";

    if (!haskey (ExpertSettings, "external"))
	ExpertSettings["external"]	= "sshd";

    // propose some good values, if there are install defaults
    if (default_domain == "")
    {
	default_domain	= Hostname::CurrentDomain ();
	// workaround for bug#393951
	if (default_domain == "" && Stage::cont ())
	{
	    map out = (map) SCR::Execute (.target.bash_output, "domainname");
	    if (out["exit"]:0 == 0)
		default_domain	= deletechars (out["stdout"]:"", "\n");
	}
    }

    // now, check DNS status (Fate 301812)
    if (FileUtils::Exists ("/usr/bin/dig") && default_domain != "" &&
	!Mode::test ())
    {
	map out = (map) SCR::Execute (.target.bash_output, sformat ("dig TXT _kerberos.%1 +short", default_domain));
	dns_default_realm = deletechars (out["stdout"]:"", "\n\"");
	if (dns_default_realm != "")
	{
	    out = (map) SCR::Execute (.target.bash_output, sformat ("dig SRV _kerberos._udp.%1 +short", default_domain));
	    list split = splitstring (deletechars (out["stdout"]:"", "\n")," ");
	    dns_kdc	= split[3]:"";
	    if (dns_kdc != "" &&
		substring (dns_kdc, size (dns_kdc) - 1, 1) == ".")
		dns_kdc	= substring (dns_kdc, 0, size (dns_kdc) - 1);
	    if (dns_kdc != "")
		dns_available = true;
	    // empty domain_realm section and no kdc entry defined and
	    // values via DNS are available -> DNS is used
	    if (kdc == "" &&
		(!contains ((list)SCR::Dir(.etc.krb5_conf.s), "domain_realm") ||
		SCR::Dir(.etc.krb5_conf.v.domain_realm) == []))
	    {
		dns_used	= true;
		kdc		= dns_kdc;
		default_realm	= dns_default_realm;
		y2milestone ("kdc by DNS %1, default_domain: %2",
		    dns_kdc, dns_default_realm);
		y2milestone ("DNS is used for Kerberos data");
	    }
	}
    }

    if ((default_realm == "" || default_realm == "MY.REALM" ||
	 default_realm == "EXAMPLE.COM") &&
        default_domain != "")
    {
        default_realm = toupper (default_domain);
    }
    if ((kdc == "" || kdc == "MY.COMPUTER" || kdc == "kerberos.example.com") &&
	FileUtils::Exists ("/usr/bin/ypwhich"))
    {
        map out = (map) SCR::Execute (.target.bash_output, "/usr/bin/ypwhich");
        kdc = deletechars (out["stdout"]:"", "\n");
    }
    if ((kdc == "" || kdc == "MY.COMPUTER" || kdc == "kerberos.example.com") &&
	FileUtils::Exists ("/usr/bin/host"))
    {
	string proposed	= "kdc." + Hostname::CurrentDomain ();
	map m = (map)SCR::Execute (.target.bash_output,
            sformat ("LANG=C /usr/bin/host %1 | /bin/grep address", proposed));
        if (m["exit"]:1 == 0)
	    kdc	= proposed;
	y2milestone ("no kdc defined, proposing: %1", kdc);
    }

    // nothing modified after pure read (negate Import's setting)
    pam_modified	= false;
    modified		= false;
    ssh_modified	= false;

    return true;
}


/**
 * Saves Kerberos configuration.
 * (No parameters because it is too short to abort)
 * @return true on success
 */
global define boolean Write () ``{

    boolean pam_installed = false;
    boolean ret = true;

    // dialog caption
    string caption = _("Saving Kerberos Client Configuration");

    integer no_stages = 3;
    list<string> stages =  [
	    // progress stage label
	    _("Write PAM settings"),
	    // progress stage label
	    _("Write Kerberos client settings"),
    ];
    list steps = [
	    // progress step label
	    _("Writing PAM settings..."),
	    // progress step label
	    _("Writing Kerberos client settings..."),
	    // final progress step label
	    _("Finished")
    ];
    if (packages != [])
    {
	// progress stage label
	stages = prepend (stages, _("Install required packages"));
	// progress step label
	steps = prepend (steps, _("Installing required packages..."));
	no_stages = no_stages + 1;
    }

    Progress::New(caption, " ", no_stages, stages, steps, "");

    if (packages != [])
    {
	y2debug ("packages to install: %1", packages);
	Progress::NextStage ();
	list<string> to_install = [];
	// check if packages are avialable...
	foreach (string p, packages, ``{
	    if (Package::Available (p) == true)
		to_install = add (to_install, p);
	});
	Package::DoInstallAndRemove (to_install, []);

	packages = [];
    }

    Progress::NextStage ();

    map write	= Export ();

    foreach (string key, string value, write["kerberos_client","ExpertSettings"]:$[], {
	write["kerberos_client",key]	= value;
    });
    write["kerberos_client"]	= remove (write["kerberos_client"]:$[], "ExpertSettings");
    write["kerberos_client","forwardable"]	= forwardable;
    write["kerberos_client","proxiable"]	= proxiable;

    if (!ssh_modified)
    {
	write["kerberos_client"]    = remove (write["kerberos_client"]:$[], "ssh_support");
    }

    if (!(pam_modified || write_only))
    {
	write	= remove (write, "pam_login");
    }
    if (!modified)
    {
	write	= remove (write, "kerberos_client");
    }
    y2internal ("map to write: %1", write);

    // -- write to /etc/krb5.conf
    Progress::NextStage ();

    map write_ret	= (map) Glove::KerberosClient::modify ($[], write);

    if (write_ret == nil)
    {
	string message	= (string) Glove::KerberosClient::last_error ();
	if (message != nil && message != "")
	{
	    Report::Error (message);
	}
	return false;
    }



	/* FIXME pam_pkcs11.conf not done yet
	if (trusted_servers != "" &&
	    Package::Installed ("krb5-plugin-preauth-pkinit-nss"))
	{
	    path pkinit_sect	= .etc.krb5_conf.v.pkinit;
	    if (!contains (SCR::Dir(.etc.krb5_conf.s), "pkinit"))
	    {
		SCR::Write (.etc.krb5_conf.st.appdefaults.pkinit, [1]);
		pkinit_sect	= .etc.krb5_conf.v.appdefaults.pkinit;
	    }
	    WriteKrb5ConfValue (
		add (pkinit_sect, "trusted_servers"), trusted_servers);
	    if (FileUtils::Exists ("/etc/pam_pkcs11/pam_pkcs11.conf"))
	    {
		SCR::Write (add (add (.etc.pam_pkcs11_conf.v.pam_pkcs11, "mapper ms"), "domainname"), default_realm);
		SCR::Write (add (add (.etc.pam_pkcs11_conf.v.pam_pkcs11, "mapper ms"), "domainnickname"), default_domain);
		SCR::Write (.etc.pam_pkcs11_conf, nil);
	    }
	}
    */

    // final stage
    Progress::NextStage ();

    return ret;
}

/**
 * Create a textual summary
 * @return summary of the current configuration
 */
global define list Summary() ``{

    string summary = "";
    string nc = Summary::NotConfigured ();
    // summary header
    summary = Summary::AddHeader(summary, _("PAM Login"));

    // summary item
    summary = Summary::AddLine(summary, (use_pam_krb) ? _("Use Kerberos") :
	// summary item
	_("Do Not Use Kerberos"));

    // summary header
    summary = Summary::AddHeader(summary, _("Default Realm"));
    summary = Summary::AddLine(summary, (default_realm != "") ? default_realm : nc);

    // summary header
    summary = Summary::AddHeader(summary, _("Default Domain"));
    summary = Summary::AddLine(summary, (default_domain != "") ? default_domain : nc);

    // summary header
    summary = Summary::AddHeader(summary, _("KDC Server Address"));
    summary = Summary::AddLine(summary, (kdc != "") ? kdc : nc);

    // summary header
    summary = Summary::AddHeader(summary, _("Clock Skew"));
    summary = Summary::AddLine(summary, (clockskew != "") ? clockskew : nc);

    return [ summary, [] ];
}

/**
 * Create a short textual summary
 * @return summary of the current configuration
 */
global define string ShortSummary() ``{

    string summary = "";
    string nc = Summary::NotConfigured ();
    // summary text, %1 is value
    summary = sformat(_("<b>KDC Server</b>: %1<br>"), (kdc != "") ? kdc : nc) +
    // summary text, %1 is value
    sformat (_("<b>Default Domain</b>: %1<br>"), (default_domain != "") ?
	default_domain : nc) +
    // summary text, %1 is value
    sformat (_("<b>Default Realm</b>: %1<br>"), (default_realm != "") ?
	default_realm : nc) +
    // summary text (yes/no follows)
    sformat(_("<b>Kerberos Authentication Enabled</b>: %1"), use_pam_krb ?
	// summary value
	_("Yes") :
	// summary value
	_("No"));
    if (dns_used)
	// summary line
	summary	= summary + "<br>" + _("Configuration Acquired via DNS");

    return summary;
}

/**
 * Return the list of packages for kerberos configuration
 */
global list<string> RequiredPackages () {

    list<string> pkgs	= required_packages;
    // do not install pam_krb5 if sssd is configured
    if (sssd)
    {
	pkgs	= filter (string p, pkgs, ``(p != "pam_krb5"));
    }
    return pkgs;
}


/**
 * Return required packages for auto-installation
 * @return map of packages to be installed and to be removed
 */
global define map AutoPackages() {
    return ($[
	"install": RequiredPackages (),
	"remove": []
    ]);
}

/**
 * Validation function for time-related values
 */
global boolean ValidateTimeEntries (string key, string val) {
    if (!regexpmatch (val, "^([0-9]+)[dmh]$") &&
	!regexpmatch (val, "^([0-9]+)$"))
    {
	if (key == "clockskew")
	    // error popup (wrong format of entered value)
	    Report::Error (_("Clock skew is invalid.
Try again.
"));
	else
	    // error popup (wrong format of entered value)
	    Report::Error (_("Lifetime is invalid.
Try again."));
	return false;
    }
    return true;
}


/* EOF */
}
