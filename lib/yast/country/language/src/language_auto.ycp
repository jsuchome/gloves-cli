/* ------------------------------------------------------------------------------
 * Copyright (c) 2012 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * Autoinstallation client for language setting
 * Author	: Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id: language_auto.ycp 67149 2012-01-12 08:37:15Z jsuchome $
 */
{
    import "Language";
    import "Console";
    import "Wizard";

    any ret = nil;
    string func = "";
    map<string,any> param = $[];

    if(size(WFM::Args()) > 0 && is(WFM::Args(0), string)) {
    func = (string) WFM::Args(0);
    if(size(WFM::Args()) > 1 && is(WFM::Args(1), map))
	param = (map<string,any>)WFM::Args(1);
    }

    y2debug ("func=%1", func);
    y2debug ("param=%1", param);

    if (func == "Change") {
	Wizard::CreateDialog();
	Wizard::HideAbortButton();

	ret = WFM::CallFunction ("select_language", [
	    $["enable_back" : true, "enable_next" : true ]]);

	Wizard::CloseDialog ();
    }
    else if(func == "Import") {
	ret = Language::Import (param);
    }
    else if(func == "Summary") {
	ret = Language::Summary();
    }
    else if (func == "Reset") {
	Language::Import($[
	    "language"	: Language::language_on_entry,
	    "languages"	: Language::languages_on_entry,
	]);
	Language::ExpertSettingsChanged	= false;
	ret =  $[];
    }
    else if (func == "Read") {
	ret = Language::Read(true);
    }
    else if (func == "Export") {
	ret = Language::Export ();
    }
    else if (func == "Write") {
	Console::SelectFont (Language::language);
	Console::Save ();
	ret = Language::Save();
    }
    /**
     * Return if configuration  was changed
     * return boolean
     */
    else if (func == "GetModified") {
	ret = Language::Modified ();
    }
    /**
     * Set all modified flags
     * return boolean
     */
    else if (func == "SetModified") {
	Language::ExpertSettingsChanged	= true;// hook (no general 'modified' variable)
	ret = true;
    }

    y2debug("ret=%1", ret);
    y2milestone("language auto finished");
    y2milestone("----------------------------------------");

    return ret;
}
