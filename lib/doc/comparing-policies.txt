We have discussed potential problems facing our current level of policy
 handling.
In current architecture, the policy handling is done at the lower layer.
But for example WebYaST goes the other way, defining policies at the API level.


1. Policy level set at API level, just like in WebYaST

  - advantages
    - better understandable to end-user
    - not too many
    - we know easily, if API function call is allowed for a user
    - logic policy structure: Add User, Write LDAP Configuration, Add Samba Share

  - disadvantages
    - API layer needs root privilegies (= YaPI called by WebYaST)
      - this result in more code that need security review ( old YaST is run
        only as root, so it is not affected )
    - It is not easy to decide what user can really change on system
      ( e.g. if http server configuration includes its installation with
      a choice which server to install )
      (if this should be user's decision, it should be part of input parameters)

  - examples

    Change time zone
    Add new user
    Active Directory client configuration


2. Policy level set on lower level (config agents)

  - advantages:
    - (much) less code running as root
    - detailed granularity
    - direct mapping to system actions, so it is easy to see
      what the user really can do

  - disadvantages
    - too many policies, hardly understandable
      - we can group them and create new higher level of 'pretty rights'

    - some tasks hard to define (remove certain directory,
      change the mode/rights, copy files)
      - path to target file/directory does not have to be known, so
        it could not be part of policy definition
      - MV: then we must use helpers that do specific actions,
        like "lib/rm-user-home $USER" instead of "rm -rf $USER_HOME"
        Then we no longer have policies only on elementary agents
        but also on helpers that do some non-elementary but still simple
        combinations to be meaningful security wise
        (eg: find user's home (read passwd or run getent); remove it)
    - direct mapping to system actions,
      exposing the implementation: this library exists to encapsulate the
      complexity of configuring the system, yet we require the admin
      to control it all via the rights

    - Does not enable e.g. editing only part of configuration files
      example: High level API could provide function (1-1 mapped to policy)
      that allows user editing just one section of config file, e.g. shares.
      But at lower level, the action (and policy) is always 'write to config
      file' so if only low level policy is used, user could modify whole file
      always.

    - We cannot offer 'logical' roles like 'Add User'/'Delete User', but only
      'technical' ones like 'Manage Users'. Because 'Add User' would need to
      contain the policy 'allow writing /etc/passwd', but such right could be
      used directly to modify or delete users as well.

    - Possibility to run scripts out of their context
      example: In the Change time zone example below, user granted with all its
      privilegies could run specific scripts (e.g. mkinitrd) directly any time,
      not just in context of changing the time


  - examples (high-level is logic grouping, but real policies are low level)

    Change time zone
      - modify /etc/sysconfig/clock
      - run zic
      - run hwclock
      - run mkinitrd

    Add new user
      - run 'useradd'
        (probably does not cover all current cases done by YaST,
        e.g. work with encrypted directory)

      or

      - write /etc/passwd
      - create home directory (either by mkdir <target>
        or 'cp -r /etc/skel <target>')
        - <target> could be anything
          ( JR: question - how does we determine location?
            A: By reading /etc/passwd)
      - change home directory ownership and mode
        (mostly to new user; group ownership can be different)

    Active Directory client configuration

      - write /etc/samba/smb.conf
      - write /etc/sysconfig/displaymanager
      - write /etc/krb/krb5.conf
      - write /etc/ssh/ssh_config
      - write /etc/nsswitch.conf
      - update firewall configuration (probably more tasks)
         - MV: too wide? restrict to "open/close TCP ports" or even
           "open/close Samba ports"?
      - run pam-config

      - write /etc/security/pam_mount.conf.xml
      - start/stop and enable/disable services
        (run /sbin/service(?) and /sbin/chkconfig)

      - create/delete shares directory (mkdir + chmod or rm -rf calls)
        - directory can be anywhere
        ( JR: question how user decide which directories it is?
        A: User does not decide this,
        it is stored in config file)
